Authors:
    Dingjia Li(dl61), Songyue Han(sh86), Zequn Jiang(zj9)

Packet formats:
    There are two types of packets in our project. One is used to send file data, also includig file name and subdir, anohter one is used to send ack number. 
    Data packet (size in bytes): [data](0 ~ 4096)-[id](4)-[flag](4)-[crc](4)
    ACK packet (size in bytes): [ACK](4)-[crc](4)
    Note that data field can have at most 4096 bytes, while other fields have fixed size.
    
Protocols:
    Our protocol is based on sliding window, using crc32 to calculate checksum value. When receiving a packet, re-calculate crc value according to data, id and flag fields,
    and then compare with crc field. For both receiver and sender, they will drop packets if two crc values cannot match.
    1. At first, sender continues sending filename and subdir to receiver in a loop. If receiver receives filename and subdir packet,
    it sends back a special ACK to sender.
    2. After getting ACK of filename and subdir, sender exits current loop and starts to send file data in order in a new loop; 
    meanwhile, sender is also ready to receive ACKs of previous sent data packets in new loop, to move window forward.
    3. For receiver, once it receives a data packet with correct checksum, it updates its own sliding window and last ACK (without gap); 
    later, it will return last ACK in sliding window to sender.
    4. Each time when sender receives an ack with correct checksum, it update its last ACK and sliding windown(moves window after last ACK). 
    5. When sender receives final ACK for last file data packet, it will send FIN to receiver to notify that recevier can close connection now.
    6. Once receiver gets FIN, it sends an ACK of FIN and then directly close connection. After ACK of FIN arrives at sender,
    sender also closes its connection. 

Algorithms:
    1.We applied RFC 6298 as the algorithm to update the timeout interval.
    The SampleRTT is calcuated by the sender with packets that are sent and acknowledged successfully in the first attempt. 
    The Estimated RTT is the exponential weighted moving average of sample RTT, which is updated as follows:
        EstimatedRTT = 0.875 * EstimatedRTT + 0.125 * SampleRTT
    The DevRTT reflect the average fluctuation range of sample RTT from estimated RTT and is updated as follows:
        DevRTT = 0.75 * DevRTT + 0.25 * |SampleRTT - EstimatedRTT| 
    During the running time of the sender, the timeout interval is updated as follows:
        TimeoutInterval = EstimatedRTT + 4 * DevRTT
    2. Fast retransmission
    When the sender receive 3 duplicate acks of the last acknowledged packet, it would resend the first packet in the window immediately, without waiting for timeout. 
    The motivation of this method is that if the sender receive 3 duplicate acks, it is very likely the case that the first packet was lost during the transmission but subsequent packets arrived so the receiver sent duplicate acks for the preamble packet.
    Applying fast retransmission enable the sender to resend the lost packet in time.

Properties/Features:
    1. Use fast retransmission, i.e. when the sender receives 3rd duplicate ACK, retransmit that packet without waiting for a retransmission timer to expire.
    After retransmission, the sender continues normal data transmission. This algorithm reduce the time sender waits before retransmitting a lost segment;
    2. Cache data in the sliding window, write data in sequence to reduce the disk seek time when writing data;
    3. Delay the data writing process until the ack message is sent;
    4. Keep trying to send data until the packet is successfully sent;
    5. Calculate the RTO(retransmission timeout) basing on the RFC6298 algorithm;
    6. Set the initial RTO to suitable value to reduce times to calculate this property;
    7. Adjust the window size to a get the best performance;
    8. To improve performance, only try out best to finish the transfer. The receiver program try at most MAX_TRIAL times to send the final ACK
    and the sender also try at most MAX_TRIAL times to send the FIN packet;
    9. Allocate data fields of the Node data structures only when creating the sliding window and reuse these memory space.

Examples of how to run the code:
    Under the directory Project 2, type command "make" to compile the project.
    Examples:
    Receive file with a specified port, e.g. 18100:
        ./recvfile -p 18100
    Suppose now we are running the receiver on amber.clear.rice.edu at port 18100:
    Send file:
    1. send a file name test.dat under the directory where sendfile is running:
        ./sendfile -r amber.clear.rice.edu:18100 -f ./test.dat
    2. send a file name test.dat under the directory named "static":
        ./sendfile -r amber.clear.rice.edu:18100 -f static/test.dat
